The ``100-matrix_mul`` module
=============================

Using ``matrix_mul``
----------------------

Import ``matrix_mul`` from the ``100-matrix_mul`` module:

	>>> matrix_mul = __import__('100-matrix_mul').matrix_mul

Test with a invalid m_a:

	>>> matrix_mul(None, [[1]])
	Traceback (most recent call last):
	  ...
	TypeError: m_a must be a list

	>>> matrix_mul("String", [[1]])
	Traceback (most recent call last):
	  ...
	TypeError: m_a must be a list

	>>> matrix_mul([1, 3, 5], [[1]])
	Traceback (most recent call last):
	  ...
	TypeError: m_a must be a list of lists

	>>> matrix_mul(["1", "3", 5], [[1]])
	Traceback (most recent call last):
	  ...
	TypeError: m_a must be a list of lists

	>>> matrix_mul([[1], [3], 5], [[1]])
	Traceback (most recent call last):
	  ...
	TypeError: m_a must be a list of lists

	>>> matrix_mul([], [[1]])
	Traceback (most recent call last):
	  ...
	ValueError: m_a can't be empty

	>>> matrix_mul([[]], [[1]])
	Traceback (most recent call last):
	  ...
	ValueError: m_a can't be empty

	>>> matrix_mul([["4"]], [[1]])
	Traceback (most recent call last):
	  ...
	TypeError: m_a should contain only integers or floats

	>>> matrix_mul([[2, "4"]], [[1], [1]])
	Traceback (most recent call last):
	  ...
	TypeError: m_a should contain only integers or floats

	>>> matrix_mul([[1.0], [4.4, "5"]], [[1]])
	Traceback (most recent call last):
	  ...
	TypeError: m_a should contain only integers or floats

	>>> matrix_mul([[1, 4.3], [3]], [[1]])
	Traceback (most recent call last):
	  ...
	TypeError: each row of m_a must be of the same size

Test with a invalid m_b:

	>>> matrix_mul([[1]], None)
	Traceback (most recent call last):
	  ...
	TypeError: m_b must be a list

	>>> matrix_mul([[1]], "String")
	Traceback (most recent call last):
	  ...
	TypeError: m_b must be a list

	>>> matrix_mul([[1]], [1, 3, 5])
	Traceback (most recent call last):
	  ...
	TypeError: m_b must be a list of lists

	>>> matrix_mul([[1]], ["1", "3", 5])
	Traceback (most recent call last):
	  ...
	TypeError: m_b must be a list of lists

	>>> matrix_mul([[1]], [[1], [3], 5])
	Traceback (most recent call last):
	  ...
	TypeError: m_b must be a list of lists

	>>> matrix_mul([[1]], [])
	Traceback (most recent call last):
	  ...
	ValueError: m_b can't be empty

	>>> matrix_mul([[1]], [[]])
	Traceback (most recent call last):
	  ...
	ValueError: m_b can't be empty

	>>> matrix_mul([[1]], [["4"]])
	Traceback (most recent call last):
	  ...
	TypeError: m_b should contain only integers or floats

	>>> matrix_mul([[1]], [[2, "4"]])
	Traceback (most recent call last):
	  ...
	TypeError: m_b should contain only integers or floats

	>>> matrix_mul([[1]], [[1.0], [4.4, "5"]])
	Traceback (most recent call last):
	  ...
	TypeError: m_b should contain only integers or floats

	>>> matrix_mul([[1]], [[1, 4.3], [3]])
	Traceback (most recent call last):
	  ...
	TypeError: each row of m_b must be of the same size

Test for incompatible sizes of m_a and m_b:

	>>> matrix_mul([[1]], [[1], [1]])
	Traceback (most recent call last):
	  ...
	ValueError: m_a and m_b can't be multiplied

	>>> matrix_mul([[1, 3]], [[1]])
	Traceback (most recent call last):
	  ...
	ValueError: m_a and m_b can't be multiplied

Test for correct multiplications:

	>>> matrix_mul([[1, 2], [3, 4]], [[1, 2], [3, 4]])
	[[7, 10], [15, 22]]

	>>> matrix_mul([[1, 1]], [[1], [1]])
	[[2]]

	>>> matrix_mul([[1, 2]], [[3, 4], [5, 6]])
	[[13, 16]]
